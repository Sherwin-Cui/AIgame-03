基于游戏数据变量表，这是优化后的AI提示词构建方法：

## 提示词模板结构

```
## 系统设定
你是文字冒险游戏《草船借箭》的游戏主持人。你需要：
1. 扮演所有NPC角色，保持其性格特征
2. 根据玩家（诸葛亮）的言行判断NPC属性值的变化
3. 根据章节规则更新特殊进度值
4. 推进剧情发展，营造紧张氛围
5. 识别何时应该触发特定事件

## 游戏背景
[插入游戏背景]

## 当前章节：第{chapterId}章 {chapterTitle}

### 章节梗概
{plotSummary}

### 当前场景出场人物
[根据当前场景动态插入相关NPC]

### 数值变化规则
[根据当前章节和出场NPC插入对应的reactionRules]

### 章节特殊规则
[根据章节插入特殊进度规则]

### 当前游戏状态
全局状态：
- 周瑜警觉(zhouYuAlert)：{current}/{max}
- 时间进度(timeProgress)：第{current}日/共{max}日
- 箭支数量(arrows)：{current}支

角色属性：
[动态插入当前场景相关角色的属性]

章节状态：
[根据章节插入对应的chapterState]

### 对话历史
[最近5-10条对话]

### 玩家最新行动
{如果有道具使用：玩家使用道具：{itemName}，效果：{itemEffect}}
玩家发言：{playerInput}

## 输出要求
请根据当前情况，以JSON格式输出：
{
  "narrative": "环境描述和剧情推进的叙述文本",
  "npc_dialogue": {
    "speaker": "NPC名字",
    "content": "对话内容"
  },
  "value_changes": {
    "npcName": {
      "attribute": "±数值"
    }
  },
  "special_progress": {
    "progressName": "±数值"
  },
  "event_suggestion": {
    "should_trigger": true/false,
    "event_id": "事件ID",
    "reason": "触发理由"
  },
  "item_grant": {
    "should_grant": true/false,
    "item_id": "道具ID",
    "condition_met": "条件说明"
  }
}
```

## 动态构建方法

### 2. 构建函数示例

```javascript
function buildAIPrompt(gameState, playerAction) {
  const chapter = chapters[`chapter${gameState.currentChapter}`];
  const activeNPCs = getActiveNPCs(gameState.currentScene);
  
  let prompt = `
## 系统设定
[固定的系统设定文本]

## 游戏背景
${getGameBackground()}

## 当前章节：第${chapter.id}章 ${chapter.title}

### 章节梗概
${chapter.plotSummary}

### 当前场景出场人物
`;

  // 添加玩家角色
  prompt += `
**诸葛亮（玩家角色）**
- 当前属性：智谋值${gameState.characters.zhugeLiang.attributes.intelligence}，口才值${gameState.characters.zhugeLiang.attributes.eloquence}，武力值${gameState.characters.zhugeLiang.attributes.force}，体力值${gameState.characters.zhugeLiang.attributes.stamina}
`;

  // 添加当前场景NPC
  activeNPCs.forEach(npcId => {
    const npc = characters[npcId];
    const attrs = gameState.characters[npcId].attributes;
    prompt += `
**${npc.name}（NPC）**
- 身份：${npc.description.split('。')[0]}
- 性格：${npc.description.split('。')[1]}
- 当前属性：${formatAttributes(attrs)}
`;
  });

  // 添加数值变化规则
  prompt += `
### 数值变化规则
`;
  activeNPCs.forEach(npcId => {
    if (reactionRules[npcId]) {
      prompt += `
**${characters[npcId].name}的反应规则：**
${reactionRules[npcId]}
`;
    }
  });

  // 添加章节特殊规则
  prompt += getChapterSpecialRules(chapter.id);

  // 添加当前游戏状态
  prompt += `
### 当前游戏状态
全局状态：
- 周瑜警觉(zhouYuAlert)：${gameState.globalState.zhouYuAlert.current}/${gameState.globalState.zhouYuAlert.max}
- 时间进度(timeProgress)：第${gameState.globalState.timeProgress.current}日/共${gameState.globalState.timeProgress.max}日
- 箭支数量(arrows)：${gameState.globalState.arrows.current}支
`;

  // 添加章节特有状态
  if (chapter.chapterState) {
    prompt += `
章节状态：
`;
    Object.entries(chapter.chapterState).forEach(([key, value]) => {
      prompt += `- ${value.description}(${key})：${gameState.chapterState[key].current}/${value.max}\n`;
    });
  }

  // 添加对话历史
  prompt += `
### 对话历史
${formatDialogueHistory(gameState.dialogueHistory.slice(-10))}
`;

  // 添加玩家行动
  prompt += `
### 玩家最新行动
`;
  if (playerAction.item) {
    const item = items[playerAction.item];
    prompt += `玩家使用道具：${item.name}，效果：${formatItemEffect(item.effect)}\n`;
  }
  prompt += `玩家发言：${playerAction.input}`;

  // 添加输出要求
  prompt += `

## 输出要求
[固定的JSON输出格式要求]
`;

  return prompt;
}

// 辅助函数
function getActiveNPCs(scene) {
  // 根据场景返回活跃的NPC列表
  const sceneNPCs = {
    "东吴军营": ["zhouYu", "luSu"],
    "江边": ["luSu", "ganNing"],
    "船上": ["ganNing"]
  };
  return sceneNPCs[scene] || [];
}

function formatAttributes(attrs) {
  return Object.entries(attrs)
    .map(([key, value]) => {
      const attrName = {
        intelligence: "智谋值",
        suspicion: "猜忌值",
        anger: "怒气值",
        trust: "信任值",
        loyalty: "忠诚值",
        alertness: "机警值",
        force: "武力值"
      }[key] || key;
      return `${attrName}${value}`;
    })
    .join('，');
}

function formatItemEffect(effect) {
  if (effect.type === 'attributeChange') {
    return `${effect.target}+${effect.value}`;
  } else if (effect.type === 'checkBonus') {
    return `${effect.target}检定+${effect.value}`;
  } else if (effect.type === 'special') {
    return effect.target;
  }
  return "特殊效果";
}
```

### 3. API调用示例

```javascript
async function callDeepSeekAPI(prompt) {
  const response = await fetch('https://api.deepseek.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer sk-f3ebd7b147f648c99f24ba9ee9e07550'
    },
    body: JSON.stringify({
      model: 'deepseek-chat',
      messages: [{
        role: 'user',
        content: prompt
      }],
      temperature: 0.7,
      max_tokens: 1000
    })
  });
  
  const data = await response.json();
  return data.choices[0].message.content;
}
```

## 关键优化点

1. **动态内容**：只包含当前场景相关的NPC和规则
2. **变量引用**：使用游戏数据中的标准变量名（如zhouYuAlert）
3. **章节特化**：每章有独特的进度规则和成功条件
4. **精简结构**：去除不必要的目标说明和完整道具列表
5. **清晰映射**：数值变化直接对应gameData.js中的变量路径